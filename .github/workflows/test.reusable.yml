# SPDX-FileCopyrightText: 2023 The Pion community <https://pion.ly>
# SPDX-License-Identifier: MIT

name: Test (reusable)
on:
  workflow_call:
    inputs:
      go-version:
        required: true
        type: string
      arch:
        required: true
        type: string

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    name: Go v${{ inputs.go-version }} on linux/${{ inputs.arch }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin
            ~/.cache
          key: ${{ runner.os }}-${{ inputs.arch }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-${{ inputs.arch }}-go-

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v2.1.0
        if: inputs.arch != 'amd64'

      - name: Run test
        env:
          CGO_ENABLED: "1"
          TEST_BENCH_OPTION: -bench=.
          TEST_FLAGS: ""
        run: |2
          docker run \
            --platform linux/${{ inputs.arch }} \
            --env CGO_ENABLED \
            --env TEST_BENCH_OPTION \
            --workdir ${{ github.workspace }} \
            --volume /home/runner:/home/runner \
            --interactive \
            golang:${{ inputs.go-version }}-buster \
            bash -s <<'EOF'
              set -eo pipefail

              echo ::group::Environment
              echo "System: $(uname -a)"
              echo "Environment variables:"
              env
              echo ::endgroup::

              if [ "${{ inputs.arch }}" == "amd64" ]; then
                TEST_FLAGS=-race
              fi

              if [ -f .github/.ci.conf ]; then
                . .github/.ci.conf
              fi

              echo ::group::Install dependencies
              go install github.com/ory/go-acc@latest
              go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest
              echo ::endgroup::
              
              if [ -n "${PRE_TEST_HOOK}" ]; then
                echo ::group::Run pre test hook
                ${PRE_TEST_HOOK}
                echo ::endgroup::
              fi

              echo ::group::Run test
              go-acc -o cover.out ./... -- \
                ${TEST_FLAGS} ${TEST_BENCH_OPTION} \
                -json \
                -v 2>&1 | \
              grep -v '^go: downloading' | \
              tee  test.log | \
              gotestfmt
              echo ::endgroup::

              if [ -n "${POST_TEST_HOOK}" ]; then
                echo ::group::Run post test hook
                ${POST_TEST_HOOK}
                echo ::endgroup::
              fi
          EOF

      - name: Upload test log
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-log-${{ inputs.go-version }}
          path: test.log
          if-no-files-found: error

      - uses: codecov/codecov-action@v3
        with:
          name: codecov-umbrella
          fail_ci_if_error: true
          flags: go
